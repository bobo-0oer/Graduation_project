###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Apr/2020  17:45:17
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5BEA.tmp
#        (D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Components\mt\MT_AF.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        MT_ZDO_FUNC -D SAPP_ZSTACK -lC
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\List
#        -lA
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 12 -f
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0029
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\Source\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

D:\MyData\Project\Graduation_project\GraduationProject_Hardware\ZStack-CC2530-r200\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2011-05-27 16:00:27 -0700 (Fri, 27 May 2011) $
      4            Revision:       $Revision: 26145 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          /* ------------------------------------------------------------------------------------------------
     60           *                                          Constants
     61           * ------------------------------------------------------------------------------------------------
     62           */
     63          
     64          #if !defined MT_AF_EXEC_CNT
     65          #define MT_AF_EXEC_CNT  15
     66          #endif
     67          
     68          #if !defined MT_AF_EXEC_DLY
     69          #define MT_AF_EXEC_DLY  1000
     70          #endif
     71          
     72          /* ------------------------------------------------------------------------------------------------
     73           *                                           Typedefs
     74           * ------------------------------------------------------------------------------------------------
     75           */
     76          
     77          typedef struct
     78          {
     79            uint8 *data;
     80            afAddrType_t dstAddr;
     81            endPointDesc_t *epDesc;
     82            uint16 cId;
     83            uint16 dataLen;
     84            uint8 transId;
     85            uint8 txOpts;
     86            uint8 radius;
     87            uint8 tick;
     88          } mtAfDataReq_t;
     89          
     90          typedef struct _mtAfInMsgList_t
     91          {
     92            struct _mtAfInMsgList_t *next;
     93            uint8 *data;
     94            uint32 timestamp;         // Receipt timestamp from MAC.
     95            uint8 tick;
     96          } mtAfInMsgList_t;
     97          
     98          /* ------------------------------------------------------------------------------------------------
     99           *                                        Local Variables
    100           * ------------------------------------------------------------------------------------------------
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /* ------------------------------------------------------------------------------------------------
    107           *                                        Global Variables
    108           * ------------------------------------------------------------------------------------------------
    109           */
    110          
    111          #if defined ( MT_AF_CB_FUNC )
    112          uint16 _afCallbackSub;
    113          #endif
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                        Local Functions
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          
    120          void MT_AfRegister(uint8 *pBuf);
    121          void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEE_SOURCE_ROUTING )
    124          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          
    135          /**************************************************************************************************
    136           * @fn          MT_AfExec
    137           *
    138           * @brief       This function is invoked by an MT timer event.
    139           *
    140           * input parameters
    141           *
    142           * None.
    143           *
    144           * output parameters
    145           *
    146           * None.
    147           *
    148           * @return      None.
    149           **************************************************************************************************
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_AfExec(void)
   \                     MT_AfExec:
    152          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    153            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    154          
    155            while (pItem != NULL)
    156            {
    157              if (--(pItem->tick) == 0)
    158              {
    159                if (pMtAfInMsgList == pItem)
    160                {
    161                  pMtAfInMsgList = pItem->next;
    162                  (void)osal_mem_free(pItem);
    163                  pItem = pMtAfInMsgList;
    164                }
    165                else
    166                {
    167                  pPrev->next = pItem->next;
    168                  (void)osal_mem_free(pItem);
    169                  pItem = pPrev->next;
    170                }
    171              }
    172              else
    173              {
    174                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    175                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \                     ??MT_AfExec_1:
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FA           MOV       R2,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FB           MOV       R3,A
    176              }
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   6038         JZ        ??MT_AfExec_3
   \   00001B   EA           MOV       A,R2
   \   00001C   2408         ADD       A,#0x8
   \   00001E   F582         MOV       DPL,A
   \   000020   E4           CLR       A
   \   000021   3B           ADDC      A,R3
   \   000022   F583         MOV       DPH,A
   \   000024   E0           MOVX      A,@DPTR
   \   000025   14           DEC       A
   \   000026   F0           MOVX      @DPTR,A
   \   000027   70E1         JNZ       ??MT_AfExec_2
   \   000029   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00002C   EA           MOV       A,R2
   \   00002D   68           XRL       A,R0
   \   00002E   7002         JNZ       ??MT_AfExec_4
   \   000030   EB           MOV       A,R3
   \   000031   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   700B         JNZ       ??MT_AfExec_5
   \   000038   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00003B   90....       MOV       DPTR,#pMtAfInMsgList
   \   00003E   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000041   80C2         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   000043   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   80BF         SJMP      ??MT_AfExec_1
    177            }
    178          
    179            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000053   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000056   6015         JZ        ??MT_AfExec_6
    180            {
    181              if (--(pMtAfDataReq->tick) == 0)
   \   000058   E8           MOV       A,R0
   \   000059   2417         ADD       A,#0x17
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   39           ADDC      A,R1
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000066   E0           MOVX      A,@DPTR
   \   000067   7004         JNZ       ??MT_AfExec_6
    182              {
    183                (void)osal_mem_free(pMtAfDataReq);
   \   000069                ; Setup parameters for call to function osal_mem_free
   \   000069   12....       LCALL     ?Subroutine10 & 0xFFFF
    184                pMtAfDataReq = NULL;
    185              }
    186            }
   \                     ??CrossCallReturnLabel_13:
   \   00006C   F0           MOVX      @DPTR,A
    187          
    188            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   00006D   90....       MOV       DPTR,#pMtAfInMsgList
   \   000070   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000073   7005         JNZ       ??MT_AfExec_7
   \   000075   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000078   6008         JZ        ??CrossCallReturnLabel_27
    189            {
    190              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   00007A                ; Setup parameters for call to function osal_start_timerEx
   \   00007A   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00007D   6003         JZ        ??CrossCallReturnLabel_27
    191              {
    192                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00007F                ; Setup parameters for call to function osal_set_event
   \   00007F   12....       LCALL     ?Subroutine21 & 0xFFFF
    193              }
    194            }
    195          }
   \                     ??CrossCallReturnLabel_27:
   \   000082                REQUIRE ?Subroutine0
   \   000082                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7CE8         MOV       R4,#-0x18
   \   000002   7D03         MOV       R5,#0x3
   \   000004   7A08         MOV       R2,#0x8
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#MT_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000010   E9           MOV       A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pMtAfDataReq
   \   000004   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000007   C8           XCH       A,R0
   \   000008   2417         ADD       A,#0x17
   \   00000A   F582         MOV       DPL,A
   \   00000C   E4           CLR       A
   \   00000D   38           ADDC      A,R0
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine62_0
   \   000003                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000006   90....       MOV       DPTR,#pMtAfDataReq
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
    196          
    197          /***************************************************************************************************
    198           * @fn      MT_AfCommandProcessing
    199           *
    200           * @brief   Process all the AF commands that are issued by test tool
    201           *
    202           * @param   pBuf - pointer to the received buffer
    203           *
    204           * @return  status
    205           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    207          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   F8           MOV       R0,A
   \   00000C   EB           MOV       A,R3
   \   00000D   F9           MOV       R1,A
    208            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV       R6,#0x0
    209          
    210            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8A82         MOV       DPL,R2
   \   000012   F583         MOV       DPH,A
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6015         JZ        ??MT_AfCommandProcessing_0
   \   000019   14           DEC       A
   \   00001A   6017         JZ        ??MT_AfCommandProcessing_1
   \   00001C   14           DEC       A
   \   00001D   6014         JZ        ??MT_AfCommandProcessing_1
   \   00001F   14           DEC       A
   \   000020   6016         JZ        ??MT_AfCommandProcessing_2
   \   000022   24F2         ADD       A,#-0xe
   \   000024   601C         JZ        ??MT_AfCommandProcessing_3
   \   000026   14           DEC       A
   \   000027   6014         JZ        ??MT_AfCommandProcessing_4
   \   000029   14           DEC       A
   \   00002A   601B         JZ        ??MT_AfCommandProcessing_5
   \   00002C   8063         SJMP      ??MT_AfCommandProcessing_6
    211            {
    212              case MT_AF_REGISTER:
    213                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00002E                ; Setup parameters for call to function MT_AfRegister
   \   00002E   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    214                break;
   \   000031   8060         SJMP      ??MT_AfCommandProcessing_7
    215          
    216              case MT_AF_DATA_REQUEST:
    217              case MT_AF_DATA_REQUEST_EXT:
    218                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000033                ; Setup parameters for call to function MT_AfDataRequest
   \   000033   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    219                break;
   \   000036   805B         SJMP      ??MT_AfCommandProcessing_7
    220          
    221          #if defined ( ZIGBEE_SOURCE_ROUTING )
    222              case MT_AF_DATA_REQUEST_SRCRTG:
    223                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   000038                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   000038   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    224                break;
   \   00003B   8056         SJMP      ??MT_AfCommandProcessing_7
    225          #endif
    226          
    227          #if defined INTER_PAN
    228              case MT_AF_INTER_PAN_CTL:
    229                MT_AfInterPanCtl(pBuf);
    230                break;
    231          #endif
    232          
    233              case MT_AF_DATA_RETRIEVE:
    234                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   00003D                ; Setup parameters for call to function MT_AfDataRetrieve
   \   00003D   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    235                break;
   \   000040   8051         SJMP      ??MT_AfCommandProcessing_7
    236          
    237              case MT_AF_DATA_STORE:
    238                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000042                ; Setup parameters for call to function MT_AfDataStore
   \   000042   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    239                break;
   \   000045   804C         SJMP      ??MT_AfCommandProcessing_7
    240          
    241              case MT_AF_APSF_CONFIG_SET:
    242                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   C0E0         PUSH      A
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   D0E0         POP       A
   \   000059   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   C0E0         PUSH      A
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000069   7401         MOV       A,#0x1
   \   00006B   12....       LCALL     ?XSTACK_DISP101_8
   \   00006E   8882         MOV       DPL,R0
   \   000070   8983         MOV       DPH,R1
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   00007A   E9           MOV       A,R1
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   F0           MOVX      @DPTR,A
   \   000082                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000082   AC..         MOV       R4,?XSP + 0
   \   000084   AD..         MOV       R5,?XSP + 1
   \   000086   7B01         MOV       R3,#0x1
   \   000088   7A13         MOV       R2,#0x13
   \   00008A   7964         MOV       R1,#0x64
   \   00008C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    243                break;
   \   00008F   8002         SJMP      ??MT_AfCommandProcessing_7
    244          
    245              default:
    246                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_6:
   \   000091   7E02         MOV       R6,#0x2
    247                break;
    248            }
    249          
    250            return status;
   \                     ??MT_AfCommandProcessing_7:
   \   000093   EE           MOV       A,R6
   \   000094   F9           MOV       R1,A
   \   000095   7403         MOV       A,#0x3
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   02....       LJMP      ?Subroutine0 & 0xFFFF
    251          }
    252          
    253          /***************************************************************************************************
    254           * @fn      MT_AfRegister
    255           *
    256           * @brief   Process AF Register command
    257           *
    258           * @param   pBuf - pointer to the received buffer
    259           *
    260           * @return  none
    261           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    264            uint8 cmdId;
    265            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?Subroutine33 & 0xFFFF
    266            endPointDesc_t *epDesc;
    267          
    268            /* parse header */
    269            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_49:
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
    270            pBuf += MT_RPC_FRAME_HDR_SZ;
    271          
    272            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   7A06         MOV       R2,#0x6
   \   00001F   7B00         MOV       R3,#0x0
   \   000021   12....       LCALL     ?Subroutine35 & 0xFFFF
    273            if ( epDesc )
   \                     ??CrossCallReturnLabel_52:
   \   000024   603D         JZ        ??MT_AfRegister_0
    274            {
    275              epDesc->task_id = &MT_TaskID;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   74..         MOV       A,#MT_TaskID & 0xff
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000031   F0           MOVX      @DPTR,A
    276              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   000032                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000032   AC..         MOV       R4,?V0
   \   000034   AD..         MOV       R5,?V1
   \   000036   EE           MOV       A,R6
   \   000037   2403         ADD       A,#0x3
   \   000039   FA           MOV       R2,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000040   E9           MOV       A,R1
   \   000041   85..82       MOV       DPL,?XSP + 0
   \   000044   85..83       MOV       DPH,?XSP + 1
   \   000047   F0           MOVX      @DPTR,A
    277              if ( retValue == ZSuccess )
   \   000048   700F         JNZ       ??MT_AfRegister_1
    278              {
    279                retValue = afRegister( epDesc );
   \   00004A                ; Setup parameters for call to function afRegister
   \   00004A   AA..         MOV       R2,?V0
   \   00004C   AB..         MOV       R3,?V1
   \   00004E   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000051   E9           MOV       A,R1
   \   000052   85..82       MOV       DPL,?XSP + 0
   \   000055   85..83       MOV       DPH,?XSP + 1
   \   000058   F0           MOVX      @DPTR,A
    280              }
    281          
    282              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6007         JZ        ??MT_AfRegister_0
    283              {
    284                osal_mem_free( epDesc );
   \   00005C                ; Setup parameters for call to function osal_mem_free
   \   00005C   AA..         MOV       R2,?V0
   \   00005E   AB..         MOV       R3,?V1
   \   000060   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    285              }
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   000063                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000063   AC..         MOV       R4,?XSP + 0
   \   000065   AD..         MOV       R5,?XSP + 1
   \   000067   7B01         MOV       R3,#0x1
   \   000069   AA..         MOV       R2,?V2
   \   00006B   7964         MOV       R1,#0x64
   \   00006D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    290          }
   \   000070   7401         MOV       A,#0x1
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   \   000075   7F06         MOV       R7,#0x6
   \   000077   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
    291          
    292          /***************************************************************************************************
    293           * @fn      MT_AfDataRequest
    294           *
    295           * @brief   Process AF Register command
    296           *
    297           * @param   pBuf - pointer to the received buffer
    298           *
    299           * @return  none
    300           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V3,R3
    303            #define MT_AF_REQ_MSG_LEN  10
    304            #define MT_AF_REQ_MSG_EXT  10
    305          
    306            endPointDesc_t *epDesc;
    307            afAddrType_t dstAddr;
    308            cId_t cId;
    309            uint8 transId, txOpts, radius;
    310            uint8 cmd0, cmd1;
    311            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine33 & 0xFFFF
    312            uint16 dataLen, tempLen;
    313          
    314            /* Parse header */
    315            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_50:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C0E0         PUSH      A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine25 & 0xFFFF
    316            cmd1 = pBuf[MT_RPC_POS_CMD1];
    317            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_36:
   \   000024   F5..         MOV       ?V2,A
   \   000026   5002         JNC       ??MT_AfDataRequest_0
   \   000028   05..         INC       ?V3
    318          
    319            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002A   7402         MOV       A,#0x2
   \   00002C   65..         XRL       A,?V9
   \   00002E   6003         JZ        $+5
   \   000030   02....       LJMP      ??MT_AfDataRequest_1 & 0xFFFF
    320            {
    321              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000033   85..82       MOV       DPL,?V2
   \   000036   85..83       MOV       DPH,?V3
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F8           MOV       R0,A
   \   00003B   740B         MOV       A,#0xb
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E8           MOV       A,R0
   \   000041   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000044   8582..       MOV       ?V2,DPL
   \   000047   8583..       MOV       ?V3,DPH
    322          
    323              if (dstAddr.addrMode == afAddr64Bit)
   \   00004A   7403         MOV       A,#0x3
   \   00004C   68           XRL       A,R0
   \   00004D   701F         JNZ       ??MT_AfDataRequest_2
    324              {
    325                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   85....       MOV       ?V4,?V2
   \   000052   85....       MOV       ?V5,?V3
   \   000055   75..00       MOV       ?V6,#0x0
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005D   7C08         MOV       R4,#0x8
   \   00005F   7D00         MOV       R5,#0x0
   \   000061   7406         MOV       A,#0x6
   \   000063   12....       LCALL     ?XSTACK_DISP101_8
   \   000066   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    326              }
   \                     ??CrossCallReturnLabel_129:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   800C         SJMP      ??CrossCallReturnLabel_102
    327              else
    328              {
    329                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   00006E   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    330              }
   \                     ??CrossCallReturnLabel_98:
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   EA           MOV       A,R2
   \   000077   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    331              pBuf += Z_EXTADDR_LEN;
    332          
    333              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_102:
   \   00007A   85..82       MOV       DPL,?V2
   \   00007D   85..83       MOV       DPH,?V3
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   C0E0         PUSH      A
   \   00008B   740C         MOV       A,#0xc
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   D0E0         POP       A
   \   000092   F0           MOVX      @DPTR,A
   \   000093   E5..         MOV       A,?V2
   \   000095   2409         ADD       A,#0x9
   \   000097   F5..         MOV       ?V2,A
   \   000099   5002         JNC       ??MT_AfDataRequest_3
   \   00009B   05..         INC       ?V3
    334              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_3:
   \   00009D   F582         MOV       DPL,A
   \   00009F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000A2   740D         MOV       A,#0xd
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   EA           MOV       A,R2
   \   0000A8   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    335              pBuf += 2;
   \                     ??CrossCallReturnLabel_103:
   \   0000AB   E5..         MOV       A,?V2
   \   0000AD   2402         ADD       A,#0x2
   \   0000AF   F5..         MOV       ?V2,A
   \   0000B1   503C         JNC       ??MT_AfDataRequest_4
   \   0000B3   05..         INC       ?V3
   \   0000B5   8038         SJMP      ??MT_AfDataRequest_4
    336            }
    337            else
    338            {
    339              /* Destination address */
    340              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000B7   740B         MOV       A,#0xb
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   F0           MOVX      @DPTR,A
    341              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000BF   85..82       MOV       DPL,?V2
   \   0000C2   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000C5   7403         MOV       A,#0x3
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   EA           MOV       A,R2
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E9           MOV       A,R1
   \   0000CE   12....       LCALL     ?Subroutine28 & 0xFFFF
    342              pBuf += 2;
    343          
    344              /* Destination endpoint */
    345              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_41:
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   C0E0         PUSH      A
   \   0000D4   740C         MOV       A,#0xc
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   D0E0         POP       A
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   E5..         MOV       A,?V2
   \   0000DE   2403         ADD       A,#0x3
   \   0000E0   F5..         MOV       ?V2,A
   \   0000E2   5002         JNC       ??MT_AfDataRequest_5
   \   0000E4   05..         INC       ?V3
    346              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_5:
   \   0000E6   740D         MOV       A,#0xd
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   E4           CLR       A
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   F0           MOVX      @DPTR,A
    347            }
    348          
    349            /* Source endpoint */
    350            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   0000EF                ; Setup parameters for call to function afFindEndPointDesc
   \   0000EF   85..82       MOV       DPL,?V2
   \   0000F2   85..83       MOV       DPH,?V3
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   F9           MOV       R1,A
   \   0000F7   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000FA   8A..         MOV       ?V10,R2
   \   0000FC   8B..         MOV       ?V11,R3
   \   0000FE   85..82       MOV       DPL,?V2
   \   000101   85..83       MOV       DPH,?V3
   \   000104   A3           INC       DPTR
   \   000105   8582..       MOV       ?V2,DPL
   \   000108   8583..       MOV       ?V3,DPH
    351          
    352            /* ClusterId */
    353            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00010B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00010E   F5..         MOV       ?V0,A
   \   000110   E4           CLR       A
   \   000111   39           ADDC      A,R1
   \   000112   F5..         MOV       ?V1,A
    354            pBuf +=2;
    355          
    356            /* TransId */
    357            transId = *pBuf++;
   \   000114   85..82       MOV       DPL,?V2
   \   000117   85..83       MOV       DPH,?V3
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   C0E0         PUSH      A
   \   00011F   7401         MOV       A,#0x1
   \   000121   12....       LCALL     ?XSTACK_DISP0_8
   \   000124   D0E0         POP       A
   \   000126   12....       LCALL     ?Subroutine28 & 0xFFFF
    358          
    359            /* TxOption */
    360            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_42:
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   F5..         MOV       ?V8,A
    361          
    362            /* Radius */
    363            radius = *pBuf++;
   \   00012D   85..82       MOV       DPL,?V2
   \   000130   85..83       MOV       DPH,?V3
   \   000133   A3           INC       DPTR
   \   000134   A3           INC       DPTR
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F5..         MOV       ?V7,A
   \   00013A   E5..         MOV       A,?V2
   \   00013C   2405         ADD       A,#0x5
   \   00013E   F5..         MOV       ?V2,A
   \   000140   5002         JNC       ??MT_AfDataRequest_6
   \   000142   05..         INC       ?V3
    364          
    365            /* Length */
    366            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_6:
   \   000144   7402         MOV       A,#0x2
   \   000146   65..         XRL       A,?V9
   \   000148   85..82       MOV       DPL,?V2
   \   00014B   85..83       MOV       DPH,?V3
   \   00014E   701A         JNZ       ??MT_AfDataRequest_7
    367            {
    368              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000150   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000153   FE           MOV       R6,A
   \   000154   E4           CLR       A
   \   000155   39           ADDC      A,R1
   \   000156   FF           MOV       R7,A
    369              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000157   EA           MOV       A,R2
   \   000158   2414         ADD       A,#0x14
   \   00015A   F8           MOV       R0,A
   \   00015B   E4           CLR       A
   \   00015C   3F           ADDC      A,R7
   \   00015D   F9           MOV       R1,A
    370              pBuf += 2;
   \   00015E   E5..         MOV       A,?V2
   \   000160   2402         ADD       A,#0x2
   \   000162   F5..         MOV       ?V2,A
   \   000164   5016         JNC       ??MT_AfDataRequest_8
   \   000166   05..         INC       ?V3
   \   000168   8012         SJMP      ??MT_AfDataRequest_8
    371            }
    372            else
    373            {
    374              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   FE           MOV       R6,A
   \   00016C   7F00         MOV       R7,#0x0
   \   00016E   A3           INC       DPTR
   \   00016F   8582..       MOV       ?V2,DPL
   \   000172   8583..       MOV       ?V3,DPH
    375              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000175   240A         ADD       A,#0xa
   \   000177   F8           MOV       R0,A
   \   000178   E4           CLR       A
   \   000179   3400         ADDC      A,#0x0
   \   00017B   F9           MOV       R1,A
    376            }
    377          
    378            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   00017C   E5..         MOV       A,?V10
   \   00017E   4B           ORL       A,R3
   \   00017F   6011         JZ        ??MT_AfDataRequest_9
    379            {
    380              retValue = afStatus_INVALID_PARAMETER;
    381            }
    382            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000181   C3           CLR       C
   \   000182   E8           MOV       A,R0
   \   000183   94FB         SUBB      A,#-0x5
   \   000185   E9           MOV       A,R1
   \   000186   9400         SUBB      A,#0x0
   \   000188   5003         JNC       $+5
   \   00018A   02....       LJMP      ??MT_AfDataRequest_10 & 0xFFFF
    383            {
    384              if (pMtAfDataReq != NULL)
   \   00018D   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000190   600B         JZ        ??MT_AfDataRequest_11
    385              {
    386                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   000192   85..82       MOV       DPL,?XSP + 0
   \   000195   85..83       MOV       DPH,?XSP + 1
   \   000198   7402         MOV       A,#0x2
   \   00019A   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    387              }
    388              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   00019D                ; Setup parameters for call to function osal_mem_alloc
   \   00019D   EE           MOV       A,R6
   \   00019E   2418         ADD       A,#0x18
   \   0001A0   FA           MOV       R2,A
   \   0001A1   E4           CLR       A
   \   0001A2   3F           ADDC      A,R7
   \   0001A3   FB           MOV       R3,A
   \   0001A4   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001A7   90....       MOV       DPTR,#pMtAfDataReq
   \   0001AA   EA           MOV       A,R2
   \   0001AB   F0           MOVX      @DPTR,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   EB           MOV       A,R3
   \   0001AE   F0           MOVX      @DPTR,A
   \   0001AF   F9           MOV       R1,A
   \   0001B0   EA           MOV       A,R2
   \   0001B1   49           ORL       A,R1
   \   0001B2   85..82       MOV       DPL,?XSP + 0
   \   0001B5   85..83       MOV       DPH,?XSP + 1
   \   0001B8   7005         JNZ       ??MT_AfDataRequest_13
    389              {
    390                retValue = afStatus_MEM_FAIL;
   \   0001BA   7410         MOV       A,#0x10
   \   0001BC   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    391              }
    392              else
    393              {
    394                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   0001BF   E4           CLR       A
   \   0001C0   F0           MOVX      @DPTR,A
    395          
    396                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001C1   90....       MOV       DPTR,#pMtAfDataReq
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   2418         ADD       A,#0x18
   \   0001C7   FA           MOV       R2,A
   \   0001C8   A3           INC       DPTR
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   3400         ADDC      A,#0x0
   \   0001CC   FB           MOV       R3,A
   \   0001CD   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0001D0   EA           MOV       A,R2
   \   0001D1   F0           MOVX      @DPTR,A
   \   0001D2   A3           INC       DPTR
   \   0001D3   EB           MOV       A,R3
   \   0001D4   F0           MOVX      @DPTR,A
    397                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001D5                ; Setup parameters for call to function osal_memcpy
   \   0001D5   7403         MOV       A,#0x3
   \   0001D7   12....       LCALL     ?XSTACK_DISP100_8
   \   0001DA   88..         MOV       ?V4,R0
   \   0001DC   89..         MOV       ?V5,R1
   \   0001DE   75..00       MOV       ?V6,#0x0
   \   0001E1   78..         MOV       R0,#?V4
   \   0001E3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E6   7C0C         MOV       R4,#0xc
   \   0001E8   7D00         MOV       R5,#0x0
   \   0001EA   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001ED   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0001F0   12....       LCALL     ?DEALLOC_XSTACK8
    398                pMtAfDataReq->epDesc = epDesc;
   \   0001F3   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0001F6   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001F9   E5..         MOV       A,?V10
   \   0001FB   F0           MOVX      @DPTR,A
   \   0001FC   A3           INC       DPTR
   \   0001FD   E5..         MOV       A,?V11
   \   0001FF   12....       LCALL     ?Subroutine13 & 0xFFFF
    399                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_84:
   \   000202   2410         ADD       A,#0x10
   \   000204   F582         MOV       DPL,A
   \   000206   E4           CLR       A
   \   000207   38           ADDC      A,R0
   \   000208   F583         MOV       DPH,A
   \   00020A   E5..         MOV       A,?V0
   \   00020C   F0           MOVX      @DPTR,A
   \   00020D   A3           INC       DPTR
   \   00020E   E5..         MOV       A,?V1
   \   000210   12....       LCALL     ?Subroutine13 & 0xFFFF
    400                pMtAfDataReq->dataLen = dataLen;
   \                     ??CrossCallReturnLabel_85:
   \   000213   2412         ADD       A,#0x12
   \   000215   F582         MOV       DPL,A
   \   000217   E4           CLR       A
   \   000218   38           ADDC      A,R0
   \   000219   F583         MOV       DPH,A
   \   00021B   EE           MOV       A,R6
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   A3           INC       DPTR
   \   00021E   EF           MOV       A,R7
   \   00021F   F0           MOVX      @DPTR,A
    401                pMtAfDataReq->transId = transId;
   \   000220   7401         MOV       A,#0x1
   \   000222   12....       LCALL     ?XSTACK_DISP0_8
   \   000225   E0           MOVX      A,@DPTR
   \   000226   C0E0         PUSH      A
   \   000228   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00022B   2414         ADD       A,#0x14
   \   00022D   F582         MOV       DPL,A
   \   00022F   E4           CLR       A
   \   000230   38           ADDC      A,R0
   \   000231   F583         MOV       DPH,A
   \   000233   D0E0         POP       A
   \   000235   12....       LCALL     ?Subroutine13 & 0xFFFF
    402                pMtAfDataReq->txOpts = txOpts;
   \                     ??CrossCallReturnLabel_86:
   \   000238   2415         ADD       A,#0x15
   \   00023A   F582         MOV       DPL,A
   \   00023C   E4           CLR       A
   \   00023D   38           ADDC      A,R0
   \   00023E   F583         MOV       DPH,A
   \   000240   E5..         MOV       A,?V8
   \   000242   12....       LCALL     ?Subroutine13 & 0xFFFF
    403                pMtAfDataReq->radius = radius;
   \                     ??CrossCallReturnLabel_87:
   \   000245   2416         ADD       A,#0x16
   \   000247   F582         MOV       DPL,A
   \   000249   E4           CLR       A
   \   00024A   38           ADDC      A,R0
   \   00024B   F583         MOV       DPH,A
   \   00024D   E5..         MOV       A,?V7
   \   00024F   12....       LCALL     ?Subroutine12 & 0xFFFF
    404          
    405                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    406                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_15:
   \   000252   12....       LCALL     ?Subroutine17 & 0xFFFF
    407                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_81:
   \   000255   604A         JZ        ??MT_AfDataRequest_14
    408                {
    409                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000257                ; Setup parameters for call to function osal_set_event
   \   000257   12....       LCALL     ?Subroutine21 & 0xFFFF
    410                }
    411              }
    412            }
   \                     ??CrossCallReturnLabel_28:
   \   00025A   8045         SJMP      ??MT_AfDataRequest_14
    413            else
    414            {
    415              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   00025C                ; Setup parameters for call to function AF_DataRequest
   \   00025C   E5..         MOV       A,?V7
   \   00025E   F5..         MOV       ?V4,A
   \   000260   78..         MOV       R0,#?V4
   \   000262   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000265   7402         MOV       A,#0x2
   \   000267   12....       LCALL     ?XSTACK_DISP100_8
   \   00026A   88..         MOV       ?V4,R0
   \   00026C   89..         MOV       ?V5,R1
   \   00026E   78..         MOV       R0,#?V4
   \   000270   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000273   78..         MOV       R0,#?V2
   \   000275   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000278   8E..         MOV       ?V2,R6
   \   00027A   8F..         MOV       ?V3,R7
   \   00027C   78..         MOV       R0,#?V2
   \   00027E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000281   78..         MOV       R0,#?V0
   \   000283   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000286   A9..         MOV       R1,?V8
   \   000288   AC..         MOV       R4,?V10
   \   00028A   AD..         MOV       R5,?V11
   \   00028C   740C         MOV       A,#0xc
   \   00028E   12....       LCALL     ?XSTACK_DISP101_8
   \   000291   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000294   7409         MOV       A,#0x9
   \   000296   12....       LCALL     ?DEALLOC_XSTACK8
   \   000299   E9           MOV       A,R1
   \   00029A   85..82       MOV       DPL,?XSP + 0
   \   00029D   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   0002A0   F0           MOVX      @DPTR,A
    416            }
    417          
    418            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   0002A1   7402         MOV       A,#0x2
   \   0002A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A6   E0           MOVX      A,@DPTR
   \   0002A7   54E0         ANL       A,#0xe0
   \   0002A9   6420         XRL       A,#0x20
   \   0002AB   700D         JNZ       ??MT_AfDataRequest_15
    419            {
    420              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0002AD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002AD   AC..         MOV       R4,?XSP + 0
   \   0002AF   AD..         MOV       R5,?XSP + 1
   \   0002B1   7B01         MOV       R3,#0x1
   \   0002B3   AA..         MOV       R2,?V9
   \   0002B5   7964         MOV       R1,#0x64
   \   0002B7   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    421            }
    422          }
   \                     ??MT_AfDataRequest_15:
   \   0002BA   740F         MOV       A,#0xf
   \   0002BC   80..         SJMP      ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   E4           CLR       A
   \   000006   C8           XCH       A,R0
   \   000007   F9           MOV       R1,A
   \   000008   EA           MOV       A,R2
   \   000009   28           ADD       A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV       R7,#0xc
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   EA           MOV       A,R2
   \   000008   2403         ADD       A,#0x3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..83       MOV       DPH,?V3
   \   000003                REQUIRE ??Subroutine56_0
   \   000003                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    423          
    424          #if defined ( ZIGBEE_SOURCE_ROUTING )
    425          
    426          /***************************************************************************************************
    427           * @fn      MT_AfDataRequestSrcRtg
    428           *
    429           * @brief   Process AF Register command
    430           *
    431           * @param   pBuf - pointer to the received buffer
    432           *
    433           * @return  none
    434           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    437            uint8 cmdId, dataLen = 0;
    438            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine25 & 0xFFFF
    439            endPointDesc_t *epDesc;
    440            byte transId;
    441            afAddrType_t dstAddr;
    442            cId_t cId;
    443            byte txOpts, radius, srcEP, relayCnt;
    444            uint16 *pRelayList;
    445            uint8 i;
    446          
    447            /* parse header */
    448            cmdId = pBuf[MT_RPC_POS_CMD1];
    449            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_37:
   \   000017   FE           MOV       R6,A
   \   000018   5001         JNC       ??MT_AfDataRequestSrcRtg_0
   \   00001A   0F           INC       R7
    450          
    451            /* Destination address */
    452            /* Initialize the panID field to zero to avoid inter-pan */
    453            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00001B                ; Setup parameters for call to function osal_memset
   \   00001B   7C0C         MOV       R4,#0xc
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7900         MOV       R1,#0x0
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP101_8
   \   000026   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    454            dstAddr.addrMode = afAddr16Bit;
   \   000029   740A         MOV       A,#0xa
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   7402         MOV       A,#0x2
   \   000030   F0           MOVX      @DPTR,A
    455            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   EA           MOV       A,R2
   \   00003E   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    456            pBuf += 2;
    457          
    458            /* Destination endpoint */
    459            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_104:
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   C0E0         PUSH      A
   \   00004A   740B         MOV       A,#0xb
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   D0E0         POP       A
   \   000051   12....       LCALL     ?Subroutine29 & 0xFFFF
    460          
    461            /* Source endpoint */
    462            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_43:
   \   000054   F9           MOV       R1,A
   \   000055   EE           MOV       A,R6
   \   000056   2404         ADD       A,#0x4
   \   000058   FE           MOV       R6,A
   \   000059   5001         JNC       ??MT_AfDataRequestSrcRtg_1
   \   00005B   0F           INC       R7
    463            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00005C                ; Setup parameters for call to function afFindEndPointDesc
   \   00005C   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00005F   8A..         MOV       ?V10,R2
   \   000061   8B..         MOV       ?V11,R3
    464          
    465            /* ClusterId */
    466            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   12....       LCALL     ?Subroutine8 & 0xFFFF
    467            pBuf +=2;
    468          
    469            /* TransId */
    470            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_8:
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   C0E0         PUSH      A
   \   000073   7401         MOV       A,#0x1
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   D0E0         POP       A
   \   00007A   12....       LCALL     ?Subroutine29 & 0xFFFF
    471          
    472            /* TxOption */
    473            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_44:
   \   00007D   F5..         MOV       ?V4,A
    474          
    475            /* Radius */
    476            radius = *pBuf++;
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F5..         MOV       ?V5,A
    477          
    478            /* Source route relay count */
    479            relayCnt = *pBuf++;
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F5..         MOV       ?V8,A
   \   000096   EE           MOV       A,R6
   \   000097   2406         ADD       A,#0x6
   \   000099   FE           MOV       R6,A
   \   00009A   5001         JNC       ??MT_AfDataRequestSrcRtg_2
   \   00009C   0F           INC       R7
    480          
    481            /* Convert the source route relay list */
    482            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   00009D                ; Setup parameters for call to function osal_mem_alloc
   \   00009D   AA..         MOV       R2,?V8
   \   00009F   EA           MOV       A,R2
   \   0000A0   2A           ADD       A,R2
   \   0000A1   FA           MOV       R2,A
   \   0000A2   E4           CLR       A
   \   0000A3   33           RLC       A
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000A8   7003         JNZ       $+5
   \   0000AA   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    483            {
    484              for( i = 0; i < relayCnt; i++ )
   \   0000AD   7C00         MOV       R4,#0x0
   \   0000AF   8020         SJMP      ??MT_AfDataRequestSrcRtg_4
    485              {
    486                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F9           MOV       R1,A
   \   0000B3   EA           MOV       A,R2
   \   0000B4   F8           MOV       R0,A
   \   0000B5   EC           MOV       A,R4
   \   0000B6   25E0         ADD       A,0xE0 /* A   */
   \   0000B8   FA           MOV       R2,A
   \   0000B9   E4           CLR       A
   \   0000BA   33           RLC       A
   \   0000BB   FB           MOV       R3,A
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   2A           ADD       A,R2
   \   0000BF   F582         MOV       DPL,A
   \   0000C1   E5..         MOV       A,?V1
   \   0000C3   3B           ADDC      A,R3
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   12....       LCALL     ?Subroutine31 & 0xFFFF
    487                pBuf += 2;
   \                     ??CrossCallReturnLabel_105:
   \   0000C9   EE           MOV       A,R6
   \   0000CA   2402         ADD       A,#0x2
   \   0000CC   FE           MOV       R6,A
   \   0000CD   5001         JNC       ??MT_AfDataRequestSrcRtg_6
   \   0000CF   0F           INC       R7
    488              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000D0   0C           INC       R4
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000D1   EC           MOV       A,R4
   \   0000D2   C3           CLR       C
   \   0000D3   95..         SUBB      A,?V8
   \   0000D5   8E82         MOV       DPL,R6
   \   0000D7   8F83         MOV       DPH,R7
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FA           MOV       R2,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   40D3         JC        ??MT_AfDataRequestSrcRtg_5
    489          
    490              /* Data payload Length */
    491              dataLen = *pBuf++;
   \   0000DE   AE82         MOV       R6,DPL
   \   0000E0   AF83         MOV       R7,DPH
    492          
    493              if ( epDesc == NULL )
   \   0000E2   E5..         MOV       A,?V10
   \   0000E4   45..         ORL       A,?V11
   \   0000E6   700A         JNZ       ??MT_AfDataRequestSrcRtg_7
    494              {
    495                retValue = afStatus_INVALID_PARAMETER;
   \   0000E8   85..82       MOV       DPL,?XSP + 0
   \   0000EB   85..83       MOV       DPH,?XSP + 1
   \   0000EE   7402         MOV       A,#0x2
   \   0000F0   8054         SJMP      ??MT_AfDataRequestSrcRtg_8
    496              }
    497              else
    498              {
    499                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    500                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0000F2                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000F2   78..         MOV       R0,#?V0
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F7   E5..         MOV       A,?V8
   \   0000F9   F5..         MOV       ?V6,A
   \   0000FB   78..         MOV       R0,#?V6
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   78..         MOV       R0,#?V5
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000105   7405         MOV       A,#0x5
   \   000107   12....       LCALL     ?XSTACK_DISP100_8
   \   00010A   88..         MOV       ?V6,R0
   \   00010C   89..         MOV       ?V7,R1
   \   00010E   78..         MOV       R0,#?V6
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000113   8E..         MOV       ?V6,R6
   \   000115   8F..         MOV       ?V7,R7
   \   000117   78..         MOV       R0,#?V6
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011C   EA           MOV       A,R2
   \   00011D   F5..         MOV       ?V6,A
   \   00011F   75..00       MOV       ?V7,#0x0
   \   000122   78..         MOV       R0,#?V6
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000127   78..         MOV       R0,#?V2
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012C   A9..         MOV       R1,?V4
   \   00012E   AC..         MOV       R4,?V10
   \   000130   AD..         MOV       R5,?V11
   \   000132   740E         MOV       A,#0xe
   \   000134   12....       LCALL     ?XSTACK_DISP101_8
   \   000137   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   00013A   740C         MOV       A,#0xc
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013F   E9           MOV       A,R1
   \   000140   85..82       MOV       DPL,?XSP + 0
   \   000143   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000146   F0           MOVX      @DPTR,A
    501              }
    502          
    503              /* Free the memory allocated */
    504              osal_mem_free( pRelayList );
   \   000147                ; Setup parameters for call to function osal_mem_free
   \   000147   AA..         MOV       R2,?V0
   \   000149   AB..         MOV       R3,?V1
   \   00014B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00014E   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    505            }
    506            else
    507            {
    508              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000150   85..82       MOV       DPL,?XSP + 0
   \   000153   85..83       MOV       DPH,?XSP + 1
   \   000156   7410         MOV       A,#0x10
   \   000158   F0           MOVX      @DPTR,A
    509            }
    510          
    511          
    512            /* Build and send back the response */
    513            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   000159                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000159   AC..         MOV       R4,?XSP + 0
   \   00015B   AD..         MOV       R5,?XSP + 1
   \   00015D   7B01         MOV       R3,#0x1
   \   00015F   AA..         MOV       R2,?V9
   \   000161   7964         MOV       R1,#0x64
   \   000163   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    514          }
   \   000166   740E         MOV       A,#0xe
   \   000168   02....       LJMP      ??Subroutine55_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine57_0
   \   000001                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   F5..         MOV       ?V2,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F5..         MOV       ?V3,A
   \   000009   22           RET
    515          #endif
    516          
    517          #if defined INTER_PAN
    518          /***************************************************************************************************
    519           * @fn      MT_AfInterPanCtl
    520           *
    521           * @brief   Process the AF Inter Pan control command.
    522           *
    523           * @param   pBuf - pointer to the received buffer
    524           *
    525           * @return  none
    526           ***************************************************************************************************/
    527          static void MT_AfInterPanCtl(uint8 *pBuf)
    528          {
    529            uint8 cmd, rtrn;
    530            uint16 panId;
    531            endPointDesc_t *pEP;
    532          
    533            cmd = pBuf[MT_RPC_POS_CMD1];
    534            pBuf += MT_RPC_FRAME_HDR_SZ;
    535          
    536            switch (*pBuf++)  // Inter-pan request parameter.
    537            {
    538            case InterPanClr:
    539              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    540              break;
    541          
    542            case InterPanSet:
    543              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    544              break;
    545          
    546            case InterPanReg:
    547              if ((pEP = afFindEndPointDesc(*pBuf)))
    548              {
    549                StubAPS_RegisterApp(pEP);
    550                rtrn = SUCCESS;
    551              }
    552              else
    553              {
    554                rtrn = FAILURE;
    555              }
    556              break;
    557          
    558            case InterPanChk:
    559              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    560              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    561              break;
    562          
    563            default:
    564              rtrn = afStatus_INVALID_PARAMETER;
    565              break;
    566            }
    567          
    568            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    569          }
    570          #endif
    571          
    572          /***************************************************************************************************
    573           * @fn      MT_AfDataConfirm
    574           *
    575           * @brief   Process
    576           *
    577           * @param   pBuf - pointer to the received buffer
    578           *
    579           * @return  none
    580           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    582          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    583            uint8 retArray[3];
    584          
    585            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   12....       LCALL     ?Subroutine22 & 0xFFFF
    586            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_30:
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   C0E0         PUSH      A
   \   000019   7401         MOV       A,#0x1
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   D0E0         POP       A
   \   000020   12....       LCALL     ?Subroutine32 & 0xFFFF
    587            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_48:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   F0           MOVX      @DPTR,A
    588          
    589            /* Build and send back the response */
    590            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   00002E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002E   AC..         MOV       R4,?XSP + 0
   \   000030   AD..         MOV       R5,?XSP + 1
   \   000032   7B03         MOV       R3,#0x3
   \   000034   7A80         MOV       R2,#-0x80
   \   000036   7944         MOV       R1,#0x44
   \   000038   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    591          }
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   D083         POP       DPH
   \   000042   D082         POP       DPL
   \   000044   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   F0           MOVX      @DPTR,A
   \   000009   22           RET
    592          
    593          /***************************************************************************************************
    594           * @fn          MT_AfIncomingMsg
    595           *
    596           * @brief       Process the callback subscription for AF Incoming data.
    597           *
    598           * @param       pkt - Incoming AF data.
    599           *
    600           * @return      none
    601           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7403         MOV       A,#0x3
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
    604            #define MT_AF_INC_MSG_LEN  17
    605            #define MT_AF_INC_MSG_EXT  10
    606          
    607            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   00000E   EA           MOV       A,R2
   \   00000F   2420         ADD       A,#0x20
   \   000011   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000014   F5..         MOV       ?V2,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V3,A
    608            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   00001A   E5..         MOV       A,?V2
   \   00001C   2411         ADD       A,#0x11
   \   00001E   FE           MOV       R6,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V3
   \   000022   FF           MOV       R7,A
    609            uint8 cmd = MT_AF_INCOMING_MSG;
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   7481         MOV       A,#-0x7f
   \   00002A   F0           MOVX      @DPTR,A
    610            uint8 *pRsp, *pTmp;
    611            mtAfInMsgList_t *pItem = NULL;
   \   00002B   75..00       MOV       ?V10,#0x0
   \   00002E   75..00       MOV       ?V11,#0x0
    612          
    613          #if defined INTER_PAN
    614            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    615            {
    616              cmd = MT_AF_INCOMING_MSG_EXT;
    617            }
    618            else
    619          #endif
    620            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    621                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000031   EA           MOV       A,R2
   \   000032   240E         ADD       A,#0xe
   \   000034   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000037   6403         XRL       A,#0x3
   \   000039   6009         JZ        ??MT_AfIncomingMsg_0
   \   00003B   C3           CLR       C
   \   00003C   EE           MOV       A,R6
   \   00003D   94F1         SUBB      A,#-0xf
   \   00003F   EF           MOV       A,R7
   \   000040   9400         SUBB      A,#0x0
   \   000042   400F         JC        ??MT_AfIncomingMsg_1
    622            {
    623              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   7482         MOV       A,#-0x7e
   \   00004B   F0           MOVX      @DPTR,A
    624            }
    625          
    626            if (cmd == MT_AF_INCOMING_MSG_EXT)
    627            {
    628              respLen += MT_AF_INC_MSG_EXT;
   \   00004C   EE           MOV       A,R6
   \   00004D   240A         ADD       A,#0xa
   \   00004F   FE           MOV       R6,A
   \   000050   E4           CLR       A
   \   000051   3F           ADDC      A,R7
   \   000052   FF           MOV       R7,A
    629            }
    630          
    631            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   000053   C3           CLR       C
   \   000054   EE           MOV       A,R6
   \   000055   94FB         SUBB      A,#-0x5
   \   000057   EF           MOV       A,R7
   \   000058   9400         SUBB      A,#0x0
   \   00005A   4031         JC        ??MT_AfIncomingMsg_2
    632            {
    633              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   E5..         MOV       A,?V2
   \   00005E   2409         ADD       A,#0x9
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   35..         ADDC      A,?V3
   \   000064   FB           MOV       R3,A
   \   000065   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000068   8A..         MOV       ?V10,R2
   \   00006A   8B..         MOV       ?V11,R3
   \   00006C   EA           MOV       A,R2
   \   00006D   4B           ORL       A,R3
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??CrossCallReturnLabel_19 & 0xFFFF
    634              {
    635                return;  // If cannot hold a huge message, cannot give indication at all.
    636              }
    637          
    638              pItem->data = (uint8 *)(pItem+1);
   \   000073   EA           MOV       A,R2
   \   000074   2409         ADD       A,#0x9
   \   000076   F8           MOV       R0,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V11
   \   00007A   F9           MOV       R1,A
   \   00007B   8A82         MOV       DPL,R2
   \   00007D   8B83         MOV       DPH,R3
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   12....       LCALL     ?Subroutine31 & 0xFFFF
    639              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_106:
   \   000084   C3           CLR       C
   \   000085   EE           MOV       A,R6
   \   000086   95..         SUBB      A,?V2
   \   000088   FE           MOV       R6,A
   \   000089   EF           MOV       A,R7
   \   00008A   95..         SUBB      A,?V3
   \   00008C   FF           MOV       R7,A
    640            }
    641          
    642            // Attempt to allocate memory for the response packet.
    643            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   00008D                ; Setup parameters for call to function osal_mem_alloc
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   EA           MOV       A,R2
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   A3           INC       DPTR
   \   00009D   EB           MOV       A,R3
   \   00009E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000A1   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000A4   7010         JNZ       ??MT_AfIncomingMsg_3
    644            {
    645              if (pItem != NULL)
   \   0000A6   E5..         MOV       A,?V10
   \   0000A8   45..         ORL       A,?V11
   \   0000AA   6007         JZ        ??MT_AfIncomingMsg_4
    646              {
    647                (void)osal_mem_free(pItem);
   \   0000AC                ; Setup parameters for call to function osal_mem_free
   \   0000AC   AA..         MOV       R2,?V10
   \   0000AE   AB..         MOV       R3,?V11
   \   0000B0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    648              }
    649              return;
   \                     ??MT_AfIncomingMsg_4:
   \   0000B3   02....       LJMP      ??CrossCallReturnLabel_19 & 0xFFFF
    650            }
    651            pTmp = pRsp;
    652          
    653            /* Group ID */
    654            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_3:
   \   0000B6   E5..         MOV       A,?V8
   \   0000B8   2402         ADD       A,#0x2
   \   0000BA   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000BD   C0E0         PUSH      A
   \   0000BF   85..82       MOV       DPL,?XSP + 0
   \   0000C2   85..83       MOV       DPH,?XSP + 1
   \   0000C5   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000C8   D0E0         POP       A
   \   0000CA   F0           MOVX      @DPTR,A
    655            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   0000CB   8A82         MOV       DPL,R2
   \   0000CD   8983         MOV       DPH,R1
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   C0E0         PUSH      A
   \   0000D3   85..82       MOV       DPL,?XSP + 0
   \   0000D6   85..83       MOV       DPH,?XSP + 1
   \   0000D9   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000DC   A3           INC       DPTR
   \   0000DD   D0E0         POP       A
   \   0000DF   F0           MOVX      @DPTR,A
    656          
    657            /* Cluster ID */
    658            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000E0   E5..         MOV       A,?V8
   \   0000E2   2404         ADD       A,#0x4
   \   0000E4   E4           CLR       A
   \   0000E5   35..         ADDC      A,?V9
   \   0000E7   F9           MOV       R1,A
   \   0000E8   0A           INC       R2
   \   0000E9   0A           INC       R2
   \   0000EA   8A82         MOV       DPL,R2
   \   0000EC   F583         MOV       DPH,A
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   C0E0         PUSH      A
   \   0000F1   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000F4   D0E0         POP       A
   \   0000F6   F0           MOVX      @DPTR,A
    659            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   0000F7   8A82         MOV       DPL,R2
   \   0000F9   8983         MOV       DPH,R1
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   C0E0         PUSH      A
   \   0000FF   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000102   A3           INC       DPTR
   \   000103   D0E0         POP       A
   \   000105   F0           MOVX      @DPTR,A
    660          
    661            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000106   7402         MOV       A,#0x2
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   6482         XRL       A,#0x82
   \   00010E   7075         JNZ       ??MT_AfIncomingMsg_5
    662            {
    663              *pTmp++ = pMsg->srcAddr.addrMode;
   \   000110   E5..         MOV       A,?V8
   \   000112   240E         ADD       A,#0xe
   \   000114   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000117   C0E0         PUSH      A
   \   000119   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00011C   D0E0         POP       A
   \   00011E   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000121   2405         ADD       A,#0x5
   \   000123   F5..         MOV       ?V0,A
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   3400         ADDC      A,#0x0
   \   000129   F5..         MOV       ?V1,A
    664          
    665              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   00012B   8A82         MOV       DPL,R2
   \   00012D   8983         MOV       DPH,R1
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   6403         XRL       A,#0x3
   \   000132   7023         JNZ       ??MT_AfIncomingMsg_6
    666              {
    667                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000134                ; Setup parameters for call to function osal_memcpy
   \   000134   E5..         MOV       A,?V8
   \   000136   2406         ADD       A,#0x6
   \   000138   F5..         MOV       ?V4,A
   \   00013A   E4           CLR       A
   \   00013B   35..         ADDC      A,?V9
   \   00013D   F5..         MOV       ?V5,A
   \   00013F   75..00       MOV       ?V6,#0x0
   \   000142   78..         MOV       R0,#?V4
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000147   7C08         MOV       R4,#0x8
   \   000149   7D00         MOV       R5,#0x0
   \   00014B   AA..         MOV       R2,?V0
   \   00014D   AB..         MOV       R3,?V1
   \   00014F   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    668              }
   \                     ??CrossCallReturnLabel_131:
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
   \   000155   8016         SJMP      ??CrossCallReturnLabel_10
    669              else
    670              {
    671                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   000157   E5..         MOV       A,?V8
   \   000159   2406         ADD       A,#0x6
   \   00015B   F8           MOV       R0,A
   \   00015C   E4           CLR       A
   \   00015D   35..         ADDC      A,?V9
   \   00015F   F9           MOV       R1,A
   \   000160   8882         MOV       DPL,R0
   \   000162   12....       LCALL     ?Subroutine23 & 0xFFFF
    672                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_32:
   \   000165   8882         MOV       DPL,R0
   \   000167   8983         MOV       DPH,R1
   \   000169   A3           INC       DPTR
   \   00016A   12....       LCALL     ?Subroutine9 & 0xFFFF
    673              }
    674              pTmp += Z_EXTADDR_LEN;
    675          
    676              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_10:
   \   00016D   E5..         MOV       A,?V8
   \   00016F   240F         ADD       A,#0xf
   \   000171   12....       LCALL     ?Subroutine2 & 0xFFFF
    677          #if defined INTER_PAN
    678              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    679              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    680          #else
    681              *pTmp++ = 0;
    682              *pTmp++ = 0;
    683          #endif
    684            }
   \                     ??CrossCallReturnLabel_0:
   \   000174   E4           CLR       A
   \   000175   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000178   F0           MOVX      @DPTR,A
   \   000179   E5..         MOV       A,?V0
   \   00017B   240B         ADD       A,#0xb
   \   00017D   F5..         MOV       ?V0,A
   \   00017F   504F         JNC       ??MT_AfIncomingMsg_7
   \   000181   05..         INC       ?V1
   \   000183   804B         SJMP      ??MT_AfIncomingMsg_7
    685            else
    686            {
    687              /* Source Address */
    688              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_5:
   \   000185   E5..         MOV       A,?V8
   \   000187   2406         ADD       A,#0x6
   \   000189   FA           MOV       R2,A
   \   00018A   E4           CLR       A
   \   00018B   35..         ADDC      A,?V9
   \   00018D   FB           MOV       R3,A
   \   00018E   8A82         MOV       DPL,R2
   \   000190   F583         MOV       DPH,A
   \   000192   E0           MOVX      A,@DPTR
   \   000193   C0E0         PUSH      A
   \   000195   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000198   D0E0         POP       A
   \   00019A   12....       LCALL     ?Subroutine33 & 0xFFFF
    689              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_51:
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   C0E0         PUSH      A
   \   0001A0   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001A3   A3           INC       DPTR
   \   0001A4   D0E0         POP       A
   \   0001A6   F0           MOVX      @DPTR,A
    690          
    691              /* Source EP */
    692              *pTmp++ = pMsg->srcAddr.endPoint;
   \   0001A7   E5..         MOV       A,?V8
   \   0001A9   240F         ADD       A,#0xf
   \   0001AB   12....       LCALL     ?Subroutine47 & 0xFFFF
    693            }
   \                     ??CrossCallReturnLabel_77:
   \   0001AE   C0E0         PUSH      A
   \   0001B0   85..82       MOV       DPL,?XSP + 0
   \   0001B3   85..83       MOV       DPH,?XSP + 1
   \   0001B6   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0001B9   2406         ADD       A,#0x6
   \   0001BB   F582         MOV       DPL,A
   \   0001BD   E4           CLR       A
   \   0001BE   38           ADDC      A,R0
   \   0001BF   F583         MOV       DPH,A
   \   0001C1   D0E0         POP       A
   \   0001C3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001C6   2407         ADD       A,#0x7
   \   0001C8   F5..         MOV       ?V0,A
   \   0001CA   A3           INC       DPTR
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   3400         ADDC      A,#0x0
   \   0001CE   F5..         MOV       ?V1,A
    694          
    695            /* Destination EP */
    696            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_7:
   \   0001D0   E5..         MOV       A,?V8
   \   0001D2   2414         ADD       A,#0x14
   \   0001D4   F582         MOV       DPL,A
   \   0001D6   E4           CLR       A
   \   0001D7   35..         ADDC      A,?V9
   \   0001D9   12....       LCALL     ?Subroutine23 & 0xFFFF
    697          
    698            /* WasBroadCast */
    699            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_33:
   \   0001DC   E5..         MOV       A,?V8
   \   0001DE   2415         ADD       A,#0x15
   \   0001E0   F582         MOV       DPL,A
   \   0001E2   E4           CLR       A
   \   0001E3   35..         ADDC      A,?V9
   \   0001E5   F583         MOV       DPH,A
   \   0001E7   12....       LCALL     ?Subroutine9 & 0xFFFF
    700          
    701            /* LinkQuality */
    702            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_11:
   \   0001EA   E5..         MOV       A,?V8
   \   0001EC   2416         ADD       A,#0x16
   \   0001EE   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0001F1   F0           MOVX      @DPTR,A
    703          
    704            /* SecurityUse */
    705            *pTmp++ = pMsg->SecurityUse;
   \   0001F2   E5..         MOV       A,?V8
   \   0001F4   2419         ADD       A,#0x19
   \   0001F6   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001F9   A3           INC       DPTR
   \   0001FA   F0           MOVX      @DPTR,A
    706          
    707            /* Timestamp */
    708            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   0001FB   E5..         MOV       A,?V8
   \   0001FD   241A         ADD       A,#0x1a
   \   0001FF   FA           MOV       R2,A
   \   000200   E4           CLR       A
   \   000201   35..         ADDC      A,?V9
   \   000203   FB           MOV       R3,A
   \   000204   8A82         MOV       DPL,R2
   \   000206   F583         MOV       DPH,A
   \   000208   78..         MOV       R0,#?V4
   \   00020A   12....       LCALL     ?L_MOV_X
   \   00020D   85..82       MOV       DPL,?V0
   \   000210   85..83       MOV       DPH,?V1
   \   000213   12....       LCALL     ?Subroutine27 & 0xFFFF
    709            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_111:
   \   000216   12....       LCALL     ?L_MOV_X
   \   000219   E5..         MOV       A,?V5
   \   00021B   85..82       MOV       DPL,?V0
   \   00021E   85..83       MOV       DPH,?V1
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   A3           INC       DPTR
   \   000224   A3           INC       DPTR
   \   000225   A3           INC       DPTR
   \   000226   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    710            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_113:
   \   000229   12....       LCALL     ?L_MOV_X
   \   00022C   7410         MOV       A,#0x10
   \   00022E   78..         MOV       R0,#?V4
   \   000230   12....       LCALL     ?UL_SHR
   \   000233   85..82       MOV       DPL,?V0
   \   000236   85..83       MOV       DPH,?V1
   \   000239   A3           INC       DPTR
   \   00023A   A3           INC       DPTR
   \   00023B   12....       LCALL     ?Subroutine27 & 0xFFFF
    711            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_112:
   \   00023E   12....       LCALL     ?L_MOV_X
   \   000241   7418         MOV       A,#0x18
   \   000243   78..         MOV       R0,#?V4
   \   000245   12....       LCALL     ?UL_SHR
   \   000248   85..82       MOV       DPL,?V0
   \   00024B   85..83       MOV       DPH,?V1
   \   00024E   A3           INC       DPTR
   \   00024F   A3           INC       DPTR
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   E5..         MOV       A,?V4
   \   000257   F0           MOVX      @DPTR,A
    712          
    713          
    714            /* Data Length */
    715            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000258   7402         MOV       A,#0x2
   \   00025A   12....       LCALL     ?XSTACK_DISP0_8
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   6482         XRL       A,#0x82
   \   000260   7020         JNZ       ??MT_AfIncomingMsg_8
    716            {
    717              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    718               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    719               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    720               */
    721              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   000262   85..82       MOV       DPL,?V0
   \   000265   85..83       MOV       DPH,?V1
   \   000268   A3           INC       DPTR
   \   000269   A3           INC       DPTR
   \   00026A   A3           INC       DPTR
   \   00026B   A3           INC       DPTR
   \   00026C   A3           INC       DPTR
   \   00026D   A3           INC       DPTR
   \   00026E   A3           INC       DPTR
   \   00026F   A3           INC       DPTR
   \   000270   E4           CLR       A
   \   000271   12....       LCALL     ?Subroutine43 & 0xFFFF
    722              *pTmp++ = LO_UINT16(dataLen);
    723              *pTmp++ = HI_UINT16(dataLen);
    724            }
   \                     ??CrossCallReturnLabel_64:
   \   000274   E5..         MOV       A,?V2
   \   000276   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000279   E5..         MOV       A,?V3
   \   00027B   F0           MOVX      @DPTR,A
   \   00027C   E5..         MOV       A,?V0
   \   00027E   240B         ADD       A,#0xb
   \   000280   800E         SJMP      ??MT_AfIncomingMsg_9
    725            else
    726            {
    727              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_8:
   \   000282   E5..         MOV       A,?V8
   \   000284   241F         ADD       A,#0x1f
   \   000286   12....       LCALL     ?Subroutine2 & 0xFFFF
    728              *pTmp++ = dataLen;
    729            }
   \                     ??CrossCallReturnLabel_1:
   \   000289   E5..         MOV       A,?V2
   \   00028B   F0           MOVX      @DPTR,A
   \   00028C   E5..         MOV       A,?V0
   \   00028E   240A         ADD       A,#0xa
   \                     ??MT_AfIncomingMsg_9:
   \   000290   F5..         MOV       ?V0,A
   \   000292   5002         JNC       ??MT_AfIncomingMsg_10
   \   000294   05..         INC       ?V1
    730          
    731            /* Data */
    732            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_10:
   \   000296   E5..         MOV       A,?V10
   \   000298   45..         ORL       A,?V11
   \   00029A   605F         JZ        ??MT_AfIncomingMsg_11
    733            {
    734              // Enqueue the new huge incoming item.
    735              pItem->next = pMtAfInMsgList;
   \   00029C   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00029F   85..82       MOV       DPL,?V10
   \   0002A2   85..83       MOV       DPH,?V11
   \   0002A5   12....       LCALL     ?Subroutine31 & 0xFFFF
    736              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_107:
   \   0002A8   90....       MOV       DPTR,#pMtAfInMsgList
   \   0002AB   E5..         MOV       A,?V10
   \   0002AD   F0           MOVX      @DPTR,A
   \   0002AE   A3           INC       DPTR
   \   0002AF   E5..         MOV       A,?V11
   \   0002B1   F0           MOVX      @DPTR,A
    737          
    738              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    739              pItem->tick = MT_AF_EXEC_CNT;
   \   0002B2   85..82       MOV       DPL,?V10
   \   0002B5   F583         MOV       DPH,A
   \   0002B7   A3           INC       DPTR
   \   0002B8   A3           INC       DPTR
   \   0002B9   A3           INC       DPTR
   \   0002BA   A3           INC       DPTR
   \   0002BB   A3           INC       DPTR
   \   0002BC   A3           INC       DPTR
   \   0002BD   A3           INC       DPTR
   \   0002BE   A3           INC       DPTR
   \   0002BF   12....       LCALL     ?Subroutine17 & 0xFFFF
    740              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_82:
   \   0002C2   6003         JZ        ??CrossCallReturnLabel_29
    741              {
    742                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0002C4                ; Setup parameters for call to function osal_set_event
   \   0002C4   12....       LCALL     ?Subroutine21 & 0xFFFF
    743              }
    744          
    745              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_29:
   \   0002C7   E5..         MOV       A,?V8
   \   0002C9   241A         ADD       A,#0x1a
   \   0002CB   F582         MOV       DPL,A
   \   0002CD   E4           CLR       A
   \   0002CE   35..         ADDC      A,?V9
   \   0002D0   F583         MOV       DPH,A
   \   0002D2   12....       LCALL     ?XLOAD_R0123
   \   0002D5   85..82       MOV       DPL,?V10
   \   0002D8   85..83       MOV       DPH,?V11
   \   0002DB   A3           INC       DPTR
   \   0002DC   A3           INC       DPTR
   \   0002DD   A3           INC       DPTR
   \   0002DE   A3           INC       DPTR
   \   0002DF   12....       LCALL     ?XSTORE_R0123
    746              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   0002E2                ; Setup parameters for call to function osal_memcpy
   \   0002E2   12....       LCALL     ?Subroutine19 & 0xFFFF
    747            }
   \                     ??CrossCallReturnLabel_23:
   \   0002E5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002E8   AC..         MOV       R4,?V2
   \   0002EA   AD..         MOV       R5,?V3
   \   0002EC   85..82       MOV       DPL,?V10
   \   0002EF   85..83       MOV       DPH,?V11
   \   0002F2   A3           INC       DPTR
   \   0002F3   A3           INC       DPTR
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   FA           MOV       R2,A
   \   0002F6   A3           INC       DPTR
   \   0002F7   E0           MOVX      A,@DPTR
   \   0002F8   FB           MOV       R3,A
   \   0002F9   800E         SJMP      ??MT_AfIncomingMsg_12
    748            else
    749            {
    750              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_11:
   \   0002FB                ; Setup parameters for call to function osal_memcpy
   \   0002FB   12....       LCALL     ?Subroutine19 & 0xFFFF
    751            }
   \                     ??CrossCallReturnLabel_24:
   \   0002FE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000301   AC..         MOV       R4,?V2
   \   000303   AD..         MOV       R5,?V3
   \   000305   AA..         MOV       R2,?V0
   \   000307   AB..         MOV       R3,?V1
   \                     ??MT_AfIncomingMsg_12:
   \   000309   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00030C   12....       LCALL     ?DEALLOC_XSTACK8
    752          
    753            /* Build and send back the response */
    754            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   00030F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00030F   85..82       MOV       DPL,?XSP + 0
   \   000312   85..83       MOV       DPH,?XSP + 1
   \   000315   E0           MOVX      A,@DPTR
   \   000316   FC           MOV       R4,A
   \   000317   A3           INC       DPTR
   \   000318   E0           MOVX      A,@DPTR
   \   000319   FD           MOV       R5,A
   \   00031A   EE           MOV       A,R6
   \   00031B   FB           MOV       R3,A
   \   00031C   7402         MOV       A,#0x2
   \   00031E   12....       LCALL     ?XSTACK_DISP0_8
   \   000321   E0           MOVX      A,@DPTR
   \   000322   FA           MOV       R2,A
   \   000323   7944         MOV       R1,#0x44
   \   000325   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    755          
    756            (void)osal_mem_free(pRsp);
   \   000328                ; Setup parameters for call to function osal_mem_free
   \   000328   85..82       MOV       DPL,?XSP + 0
   \   00032B   85..83       MOV       DPH,?XSP + 1
   \   00032E   12....       LCALL     ?Subroutine15 & 0xFFFF
    757          }
   \                     ??CrossCallReturnLabel_19:
   \   000331   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V9
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   FA           MOV       R2,A
   \   000007   E9           MOV       A,R1
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V4
   \   000006                REQUIRE ??Subroutine58_0
   \   000006                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   78..         MOV       R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E5..         MOV       A,?V8
   \   000002   2422         ADD       A,#0x22
   \   000004   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000007   F5..         MOV       ?V4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V5,A
   \   00000D   78..         MOV       R0,#?V4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine60_0
   \   000006                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    758          
    759          /**************************************************************************************************
    760           * @fn          MT_AfDataRetrieve
    761           *
    762           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    763           *          incoming AF message.
    764           *
    765           * input parameters
    766           *
    767           * @param pBuf - pointer to the received buffer
    768           *
    769           * output parameters
    770           *
    771           * @param rtrn - AF-Status of the operation.
    772           *
    773           * @return      None.
    774           **************************************************************************************************
    775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    776          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    778            #define MT_AF_RTV_HDR_SZ  2
    779          
    780            uint32 timestamp;
    781            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   00000E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000011   7401         MOV       A,#0x1
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine31 & 0xFFFF
    782            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_108:
   \   000019   7A01         MOV       R2,#0x1
    783            uint8 len = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
    784          
    785            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   E5..         MOV       A,?V0
   \   000025   2403         ADD       A,#0x3
   \   000027   F5..         MOV       ?V0,A
   \   000029   5002         JNC       ??MT_AfDataRetrieve_0
   \   00002B   05..         INC       ?V1
    786            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_AfDataRetrieve_0:
   \   00002D   F582         MOV       DPL,A
   \   00002F   85..83       MOV       DPH,?V1
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V4,A
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V5,A
   \   000038   F5..         MOV       ?V6,A
   \   00003A   F5..         MOV       ?V7,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F5..         MOV       ?V8,A
   \   000040   E4           CLR       A
   \   000041   F5..         MOV       ?V9,A
   \   000043   F5..         MOV       ?V10,A
   \   000045   F5..         MOV       ?V11,A
   \   000047   7408         MOV       A,#0x8
   \   000049   78..         MOV       R0,#?V8
   \   00004B   12....       LCALL     ?L_SHL
   \   00004E   78..         MOV       R0,#?V4
   \   000050   79..         MOV       R1,#?V8
   \   000052   12....       LCALL     ?L_ADD
   \   000055   85..82       MOV       DPL,?V0
   \   000058   85..83       MOV       DPH,?V1
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F5..         MOV       ?V8,A
   \   000060   E4           CLR       A
   \   000061   F5..         MOV       ?V9,A
   \   000063   7410         MOV       A,#0x10
   \   000065   78..         MOV       R0,#?V8
   \   000067   12....       LCALL     ?L_SHL
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   79..         MOV       R1,#?V8
   \   00006E   12....       LCALL     ?L_ADD
   \   000071   85..82       MOV       DPL,?V0
   \   000074   85..83       MOV       DPH,?V1
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F5..         MOV       ?V8,A
   \   00007D   E4           CLR       A
   \   00007E   F5..         MOV       ?V10,A
   \   000080   7418         MOV       A,#0x18
   \   000082   78..         MOV       R0,#?V8
   \   000084   12....       LCALL     ?L_SHL
   \   000087   78..         MOV       R0,#?V4
   \   000089   79..         MOV       R1,#?V8
   \   00008B   12....       LCALL     ?L_ADD
   \   00008E   800E         SJMP      ??CrossCallReturnLabel_109
    787          
    788            while (pItem != NULL)
    789            {
    790              pPrev = pItem;
    791              if (pItem->timestamp == timestamp)
    792              {
    793                break;
    794              }
    795              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_1:
   \   000090   EA           MOV       A,R2
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000097   EA           MOV       A,R2
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00009E   EA           MOV       A,R2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000A5   606E         JZ        ??MT_AfDataRetrieve_2
   \   0000A7   E8           MOV       A,R0
   \   0000A8   FC           MOV       R4,A
   \   0000A9   E9           MOV       A,R1
   \   0000AA   FD           MOV       R5,A
   \   0000AB   EA           MOV       A,R2
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F583         MOV       DPH,A
   \   0000B3   8882         MOV       DPL,R0
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   78..         MOV       R0,#?V4
   \   0000BB   12....       LCALL     ?L_EQ_X
   \   0000BE   70D0         JNZ       ??MT_AfDataRetrieve_1
    796            }
    797          
    798            if (pItem != NULL)
    799            {
    800              uint16 idx;
    801              uint8 *pRsp;
    802          
    803              pBuf += 4;
   \   0000C0   E5..         MOV       A,?V0
   \   0000C2   2404         ADD       A,#0x4
   \   0000C4   F5..         MOV       ?V0,A
   \   0000C6   5002         JNC       ??MT_AfDataRetrieve_3
   \   0000C8   05..         INC       ?V1
    804              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRetrieve_3:
   \   0000CA   F582         MOV       DPL,A
   \   0000CC   85..83       MOV       DPH,?V1
   \   0000CF   12....       LCALL     ?Subroutine8 & 0xFFFF
    805              len = pBuf[2];
   \                     ??CrossCallReturnLabel_9:
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   A3           INC       DPTR
   \   0000D9   12....       LCALL     ?Subroutine22 & 0xFFFF
    806          
    807              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \                     ??CrossCallReturnLabel_31:
   \   0000DC   7054         JNZ       ??MT_AfDataRetrieve_4
    808              {
    809                if (pMtAfInMsgList == pItem)
   \   0000DE   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000E1   7401         MOV       A,#0x1
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   68           XRL       A,R0
   \   0000E8   7003         JNZ       ??MT_AfDataRetrieve_5
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   69           XRL       A,R1
   \                     ??MT_AfDataRetrieve_5:
   \   0000ED   700D         JNZ       ??MT_AfDataRetrieve_6
    810                {
    811                  pMtAfInMsgList = pItem->next;
   \   0000EF   7401         MOV       A,#0x1
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL     ?Subroutine4 & 0xFFFF
    812                }
   \                     ??CrossCallReturnLabel_3:
   \   0000F7   90....       MOV       DPTR,#pMtAfInMsgList
   \   0000FA   800C         SJMP      ??MT_AfDataRetrieve_7
    813                else
    814                {
    815                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_6:
   \   0000FC   7401         MOV       A,#0x1
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine4 & 0xFFFF
    816                }
   \                     ??CrossCallReturnLabel_4:
   \   000104   8C82         MOV       DPL,R4
   \   000106   8D83         MOV       DPH,R5
   \                     ??MT_AfDataRetrieve_7:
   \   000108   12....       LCALL     ?Subroutine31 & 0xFFFF
    817                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_110:
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   7401         MOV       A,#0x1
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   12....       LCALL     ?Subroutine15 & 0xFFFF
    818                rtrn = afStatus_SUCCESS;
   \                     ??CrossCallReturnLabel_20:
   \   000113   7A00         MOV       R2,#0x0
    819              }
    820              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    821              {
    822                rtrn = afStatus_MEM_FAIL;
    823                len = 0;
    824              }
    825              else
    826              {
    827                pRsp[0] = ZSuccess;
    828                pRsp[1] = len;
    829                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    830                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    831                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    832                (void)osal_mem_free(pRsp);
    833                return;
    834              }
    835            }
    836          
    837            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_2:
   \   000115   EA           MOV       A,R2
   \   000116   85..82       MOV       DPL,?V0
   \   000119   85..83       MOV       DPH,?V1
   \   00011C   12....       LCALL     ?Subroutine44 & 0xFFFF
    838            pBuf[1] = len;
   \                     ??CrossCallReturnLabel_67:
   \   00011F   12....       LCALL     ?Subroutine9 & 0xFFFF
    839            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    840                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \                     ??CrossCallReturnLabel_12:
   \   000122                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000122   AC..         MOV       R4,?V0
   \   000124   AD..         MOV       R5,?V1
   \   000126   7B02         MOV       R3,#0x2
   \   000128   7A12         MOV       R2,#0x12
   \   00012A   7964         MOV       R1,#0x64
   \   00012C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    841          }
   \                     ??MT_AfDataRetrieve_8:
   \   00012F   02....       LJMP      ?Subroutine1 & 0xFFFF
   \                     ??MT_AfDataRetrieve_4:
   \   000132                ; Setup parameters for call to function osal_mem_alloc
   \   000132   2402         ADD       A,#0x2
   \   000134   FA           MOV       R2,A
   \   000135   E4           CLR       A
   \   000136   3400         ADDC      A,#0x0
   \   000138   FB           MOV       R3,A
   \   000139   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00013C   8A..         MOV       ?V4,R2
   \   00013E   8B..         MOV       ?V5,R3
   \   000140   AE..         MOV       R6,?V4
   \   000142   AF..         MOV       R7,?V5
   \   000144   EA           MOV       A,R2
   \   000145   4F           ORL       A,R7
   \   000146   700C         JNZ       ??MT_AfDataRetrieve_9
   \   000148   7A10         MOV       R2,#0x10
   \   00014A   85..82       MOV       DPL,?XSP + 0
   \   00014D   85..83       MOV       DPH,?XSP + 1
   \   000150   E4           CLR       A
   \   000151   F0           MOVX      @DPTR,A
   \   000152   80C1         SJMP      ??MT_AfDataRetrieve_2
   \                     ??MT_AfDataRetrieve_9:
   \   000154   8A82         MOV       DPL,R2
   \   000156   8B83         MOV       DPH,R3
   \   000158   E4           CLR       A
   \   000159   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00015C   8A82         MOV       DPL,R2
   \   00015E   8B83         MOV       DPH,R3
   \   000160   A3           INC       DPTR
   \   000161   F0           MOVX      @DPTR,A
   \   000162                ; Setup parameters for call to function osal_memcpy
   \   000162   7401         MOV       A,#0x1
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   25..         ADD       A,?V2
   \   00016D   F5..         MOV       ?V0,A
   \   00016F   A3           INC       DPTR
   \   000170   E0           MOVX      A,@DPTR
   \   000171   35..         ADDC      A,?V3
   \   000173   F5..         MOV       ?V1,A
   \   000175   75..00       MOV       ?V2,#0x0
   \   000178   78..         MOV       R0,#?V0
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017D   7403         MOV       A,#0x3
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   E0           MOVX      A,@DPTR
   \   000183   FC           MOV       R4,A
   \   000184   7D00         MOV       R5,#0x0
   \   000186   EA           MOV       A,R2
   \   000187   2402         ADD       A,#0x2
   \   000189   FA           MOV       R2,A
   \   00018A   E4           CLR       A
   \   00018B   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000191   EE           MOV       A,R6
   \   000192   FC           MOV       R4,A
   \   000193   EF           MOV       A,R7
   \   000194   FD           MOV       R5,A
   \   000195   85..82       MOV       DPL,?XSP + 0
   \   000198   85..83       MOV       DPH,?XSP + 1
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   2402         ADD       A,#0x2
   \   00019E   FB           MOV       R3,A
   \   00019F   7A12         MOV       R2,#0x12
   \   0001A1   7964         MOV       R1,#0x64
   \   0001A3   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   0001A6                ; Setup parameters for call to function osal_mem_free
   \   0001A6   EE           MOV       A,R6
   \   0001A7   FA           MOV       R2,A
   \   0001A8   EF           MOV       A,R7
   \   0001A9   FB           MOV       R3,A
   \   0001AA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001AD   8080         SJMP      ??MT_AfDataRetrieve_8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   3F           ADDC      A,R7
   \   000001   FB           MOV       R3,A
   \   000002                REQUIRE ??Subroutine61_0
   \   000002                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000006   F9           MOV       R1,A
   \   000007   22           RET
    842          
    843          /**************************************************************************************************
    844           * @fn          MT_AfDataStore
    845           *
    846           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    847           *          outgoing AF message.
    848           *
    849           * input parameters
    850           *
    851           * @param pBuf - pointer to the received buffer
    852           *
    853           * output parameters
    854           *
    855           * @param rtrn - AF-Status of the operation.
    856           *
    857           * @return      None.
    858           **************************************************************************************************
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    862            uint16 idx;
    863            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7401         MOV       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_AfDataStore_0
   \   000019   0B           INC       R3
    866            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   F582         MOV       DPL,A
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FC           MOV       R4,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   C8           XCH       A,R0
   \   000025   F9           MOV       R1,A
   \   000026   EC           MOV       A,R4
   \   000027   28           ADD       A,R0
   \   000028   FE           MOV       R6,A
   \   000029   E4           CLR       A
   \   00002A   39           ADDC      A,R1
   \   00002B   FF           MOV       R7,A
    867            len = pBuf[2];
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FC           MOV       R4,A
    868            pBuf += 3;
   \   000034   EA           MOV       A,R2
   \   000035   2403         ADD       A,#0x3
   \   000037   FA           MOV       R2,A
   \   000038   5001         JNC       ??MT_AfDataStore_1
   \   00003A   0B           INC       R3
    869          
    870            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00003B   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00003E   700B         JNZ       ??MT_AfDataStore_2
    871            {
    872              rtrn = afStatus_MEM_FAIL;
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   7410         MOV       A,#0x10
   \   000048   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    873            }
    874            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   00004B   EC           MOV       A,R4
   \   00004C   7078         JNZ       ??MT_AfDataStore_4
    875            {
    876              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    877                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    878                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004E                ; Setup parameters for call to function AF_DataRequest
   \   00004E   E8           MOV       A,R0
   \   00004F   2416         ADD       A,#0x16
   \   000051   F582         MOV       DPL,A
   \   000053   E4           CLR       A
   \   000054   39           ADDC      A,R1
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V0,A
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   90....       MOV       DPTR,#pMtAfDataReq
   \   000062   E0           MOVX      A,@DPTR
   \   000063   2414         ADD       A,#0x14
   \   000065   F5..         MOV       ?V0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   3400         ADDC      A,#0x0
   \   00006B   F5..         MOV       ?V1,A
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000075   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000078   E8           MOV       A,R0
   \   000079   2412         ADD       A,#0x12
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   39           ADDC      A,R1
   \   00007F   F583         MOV       DPH,A
   \   000081   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000084   90....       MOV       DPTR,#pMtAfDataReq
   \   000087   E0           MOVX      A,@DPTR
   \   000088   2410         ADD       A,#0x10
   \   00008A   F582         MOV       DPL,A
   \   00008C   E4           CLR       A
   \   00008D   39           ADDC      A,R1
   \   00008E   F583         MOV       DPH,A
   \   000090   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000093   90....       MOV       DPTR,#pMtAfDataReq
   \   000096   E0           MOVX      A,@DPTR
   \   000097   2415         ADD       A,#0x15
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   90....       MOV       DPTR,#pMtAfDataReq + 1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   FC           MOV       R4,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   FD           MOV       R5,A
   \   0000AE   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000B1   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000B4   7409         MOV       A,#0x9
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV       A,R1
   \   0000BA   85..82       MOV       DPL,?XSP + 0
   \   0000BD   85..83       MOV       DPH,?XSP + 1
   \   0000C0   F0           MOVX      @DPTR,A
    879              (void)osal_mem_free(pMtAfDataReq);
   \   0000C1                ; Setup parameters for call to function osal_mem_free
   \   0000C1   12....       LCALL     ?Subroutine10 & 0xFFFF
    880              pMtAfDataReq = NULL;
    881            }
   \                     ??CrossCallReturnLabel_14:
   \   0000C4   8023         SJMP      ??MT_AfDataStore_3
    882            else
    883            {
    884              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000C6                ; Setup parameters for call to function osal_memcpy
   \   0000C6   8A..         MOV       ?V0,R2
   \   0000C8   8B..         MOV       ?V1,R3
   \   0000CA   75..00       MOV       ?V2,#0x0
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D2   7D00         MOV       R5,#0x0
   \   0000D4   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   2E           ADD       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
    885              rtrn = afStatus_SUCCESS;
   \   0000E2   85..82       MOV       DPL,?XSP + 0
   \   0000E5   85..83       MOV       DPH,?XSP + 1
   \   0000E8   E4           CLR       A
   \                     ??MT_AfDataStore_3:
   \   0000E9   F0           MOVX      @DPTR,A
    886            }
    887          
    888            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    889                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \   0000EA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000EA   AC..         MOV       R4,?XSP + 0
   \   0000EC   AD..         MOV       R5,?XSP + 1
   \   0000EE   7B01         MOV       R3,#0x1
   \   0000F0   7A11         MOV       R2,#0x11
   \   0000F2   7964         MOV       R1,#0x64
   \   0000F4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    890          }
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC   7F03         MOV       R7,#0x3
   \   0000FE   02....       LJMP      ?BANKED_LEAVE_XDATA
    891          
    892          /**************************************************************************************************
    893           * @fn          MT_AfAPSF_ConfigSet
    894           *
    895           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    896           *
    897           * input parameters
    898           *
    899           * @param       pBuf - Pointer to the received buffer.
    900           *
    901           * output parameters
    902           *
    903           * None.
    904           *
    905           * @return      None.
    906           */
    907          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    908          {
    909            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    910            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    911          
    912            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    913                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    914          }
    915          
    916          /***************************************************************************************************
    917          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     12   MT_AfCommandProcessing
        0     12   -> MT_AfDataRequest
        0     12   -> MT_AfDataRequestSrcRtg
        0     12   -> MT_AfDataRetrieve
        0     12   -> MT_AfDataStore
        0     12   -> MT_AfRegister
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> afAPSF_ConfigSet
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     56   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     35   -> osal_start_timerEx
      1     58   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     38   MT_AfDataRetrieve
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
      1     33   MT_AfDataStore
        0     21   -> AF_DataRequest
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_free
        0     15   -> osal_memcpy
      0      9   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0      9   -> osal_start_timerEx
      1     26   MT_AfIncomingMsg
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_set_event
        0     23   -> osal_start_timerEx
      1     27   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ??Subroutine51_0
       3  ??Subroutine52_0
       5  ??Subroutine53_0
       4  ??Subroutine54_0
       8  ??Subroutine55_0
       6  ??Subroutine56_0
       5  ??Subroutine57_0
       8  ??Subroutine58_0
       5  ??Subroutine59_0
       4  ??Subroutine60_0
       6  ??Subroutine61_0
       7  ??Subroutine62_0
       5  ?Subroutine0
       2  ?Subroutine1
      13  ?Subroutine10
       3  ?Subroutine11
      17  ?Subroutine12
       1  ?Subroutine13
       4  ?Subroutine14
       4  ?Subroutine15
       3  ?Subroutine16
       3  ?Subroutine17
      13  ?Subroutine18
      16  ?Subroutine19
      13  ?Subroutine2
       4  ?Subroutine20
      13  ?Subroutine21
      10  ?Subroutine22
      11  ?Subroutine23
       5  ?Subroutine24
      11  ?Subroutine25
       5  ?Subroutine26
       6  ?Subroutine27
       5  ?Subroutine28
      10  ?Subroutine29
       3  ?Subroutine3
       9  ?Subroutine30
       1  ?Subroutine31
       6  ?Subroutine32
       4  ?Subroutine33
       2  ?Subroutine34
      10  ?Subroutine35
      14  ?Subroutine36
       9  ?Subroutine37
      11  ?Subroutine38
       6  ?Subroutine39
       8  ?Subroutine4
       9  ?Subroutine40
      12  ?Subroutine41
       4  ?Subroutine42
      17  ?Subroutine43
       8  ?Subroutine44
       7  ?Subroutine45
       9  ?Subroutine46
       9  ?Subroutine47
       8  ?Subroutine48
       9  ?Subroutine49
      12  ?Subroutine5
       5  ?Subroutine50
       6  ?Subroutine6
       3  ?Subroutine7
      10  ?Subroutine8
       5  ?Subroutine9
     157  MT_AfCommandProcessing
      71  MT_AfDataConfirm
     702  MT_AfDataRequest
     363  MT_AfDataRequestSrcRtg
     431  MT_AfDataRetrieve
     257  MT_AfDataStore
     130  MT_AfExec
     820  MT_AfIncomingMsg
     122  MT_AfRegister
       2  pMtAfDataReq
       2  pMtAfInMsgList
      54  -- Other

 
 3 525 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
 3 525 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
